@page "/add-ticket"
@using ShowTime.Businesslogic.Abstractions
@using ShowTime.Businesslogic.Dtos
@inject ITicketService TicketService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    .ticket-form-container {
        max-width: 600px;
        margin: 4rem auto;
        background: rgba(30, 27, 75, 0.85);
        backdrop-filter: blur(20px);
        padding: 2.5rem;
        border-radius: 18px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(139, 92, 246, 0.2);
    }

        .ticket-form-container h3 {
            color: #c4b5fd;
            font-weight: 700;
            font-size: 1.8rem;
            text-align: center;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.6);
        }

    .form-label {
        color: #c7d2fe;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .form-control {
        background: rgba(30, 27, 75, 0.7);
        border: 1px solid rgba(139, 92, 246, 0.4);
        border-radius: 10px;
        padding: 12px 16px;
        color: white;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 4px rgba(139, 92, 246, 0.3);
            background: rgba(30, 27, 75, 0.85);
        }

    .btn-success, .btn-secondary {
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.2s ease;
    }

    .btn-success {
        background-color: #10b981;
        border: none;
        box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
    }

        .btn-success:hover {
            background-color: #059669;
        }

    .btn-secondary {
        background-color: #6b7280;
        border: none;
    }

        .btn-secondary:hover {
            background-color: #4b5563;
        }

    .alert-success {
        background: rgba(34, 197, 94, 0.2);
        border: 1px solid rgba(34, 197, 94, 0.5);
        color: #22c55e;
        border-radius: 10px;
        padding: 1rem;
        text-align: center;
    }
</style>

<div class="ticket-form-container">
    <h3>
        <i class="bi bi-plus-circle me-2"></i>
        Add Ticket for Festival #@FestivalId
    </h3>

    <EditForm Model="newTicket" OnValidSubmit="HandleValidSubmit" FormName="AddTicket">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-tag me-1"></i> Ticket Type
            </label>
            <InputText class="form-control" @bind-Value="newTicket.Type" />
            <ValidationMessage For="@(() => newTicket.Type)" class="text-danger small" />
        </div>

        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-cash-coin me-1"></i> Price (EUR)
            </label>
            <InputNumber class="form-control" @bind-Value="newTicket.Price" step="0.01" />
            <ValidationMessage For="@(() => newTicket.Price)" class="text-danger small" />
        </div>

        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-stack me-1"></i> Quantity
            </label>
            <InputNumber class="form-control" @bind-Value="newTicket.Quantity" />
            <ValidationMessage For="@(() => newTicket.Quantity)" class="text-danger small" />
        </div>

        <div class="d-flex gap-2 mt-4 justify-content-end">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save me-1"></i> Save Ticket
            </button>
            <button type="button" class="btn btn-secondary" @onclick="@GoBack">
                <i class="bi bi-arrow-left me-1"></i> Cancel
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <div class="alert-success mt-4">
            <i class="bi bi-check-circle-fill me-1"></i> @successMessage
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    public int FestivalId { get; set; }

    private TicketCreateDto newTicket = new();
    private string? successMessage;

    protected override void OnInitialized()
    {
        newTicket.FestivalId = FestivalId;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await TicketService.CreateTicketAsync(newTicket);
            successMessage = "✅ Ticket added successfully!";
            Navigation.NavigateTo($"/create-ticket/{FestivalId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating ticket: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/tickets/{FestivalId}");
    }
}
