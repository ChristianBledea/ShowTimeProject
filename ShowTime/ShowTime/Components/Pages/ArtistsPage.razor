@page "/ArtistsPage"
@using ShowTime.Businesslogic.Abstractions
@using ShowTime.Businesslogic.Dtos
@using ShowTime.Businesslogic.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IArtistService ArtistService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<style>
    .artists-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    .artist-card {
        background: linear-gradient(135deg, #3d3b6b, #4a4872);
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 24px rgba(0,0,0,0.3);
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1.5rem 1rem 1rem 1rem;
        min-height: 350px;
    }

        .artist-card:hover {
            transform: translateY(-8px) scale(1.03);
            box-shadow: 0 16px 32px rgba(0,0,0,0.4);
            border-color: #20c997;
        }

    .artist-image {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 50%;
        border: 3px solid #20c997;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(32,201,151,0.15);
        background: #fff;
    }

    .artist-name {
        font-weight: bold;
        color: #ffffff;
        font-size: 1.2rem;
        margin-bottom: 0.25rem;
        text-align: center;
    }

    .artist-genre {
        color: #b8b8b8;
        font-size: 1rem;
        font-style: italic;
        margin-bottom: 1.2rem;
        text-align: center;
    }

    .artist-actions {
        margin-top: auto;
        width: 100%;
        display: flex;
        justify-content: space-between;
    }

    .add-artist-btn {
        margin-bottom: 1.5rem;
    }
</style>

<div class="container mt-4">

    <AuthorizeView Roles="Admin">
        <div class="d-flex justify-content-end add-artist-btn">
            <button class="btn btn-success" @onclick="@(() => NavigationManager.NavigateTo("/AddArtist"))">
                <span class="bi bi-plus-circle me-1"></span> Add Artist
            </button>
        </div>
    </AuthorizeView>

    @if (isLoading)
    {
        <div class="d-flex align-items-center">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span>Loading artists...</span>
        </div>
    }
    else if (artists.Count == 0)
    {
        <p>No artists registered</p>
    }
    else
    {
        <div class="artists-grid">
            @foreach (var artist in artists)
            {
                <div class="artist-card">
                    <img src="@artist.ImageUrl" alt="@artist.Name" class="artist-image" />
                    <div class="artist-name">@artist.Name</div>
                    <div class="artist-genre">@artist.Genre</div>
                    <AuthorizeView Roles="Admin">
                        <div class="artist-actions">
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteArtist(artist.Id)">
                                <span class="bi bi-trash me-1"></span> Delete
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="() => UpdateArtist(artist.Id)">
                                <span class="bi bi-pencil-square me-1"></span> Update
                            </button>
                        </div>
                    </AuthorizeView>
                </div>
            }
        </div>
    }
</div>

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        artists = await ArtistService.getAllArtistsAsync();
        isLoading = false;
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        artists = await ArtistService.getAllArtistsAsync();
    }

    private void UpdateArtist(int id)
    {
        NavigationManager.NavigateTo($"/UpdateArtist/{id}");
    }
}
