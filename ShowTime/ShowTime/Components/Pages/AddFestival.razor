@page "/add-festival"
@using ShowTime.Businesslogic.Abstractions
@using ShowTime.Businesslogic.Dtos
@inject IFestivalService FestivalService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow rounded">
                <div class="card-body p-4">
                    <h3 class="card-title mb-4 text-primary">Add New Festival</h3>

                    <EditForm EditContext="@editContext" OnValidSubmit="AddNewFestival" FormName="AddNewfestival">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label for="festivalName" class="form-label fw-semibold">Name</label>
                            <InputText id="festivalName" class="@GetInputClass(nameof(newFestival.Name))" @bind-Value="newFestival.Name" />
                            <ValidationMessage For="@(() => newFestival.Name)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="festivalLocation" class="form-label fw-semibold">Location</label>
                            <InputText id="festivalLocation" class="@GetInputClass(nameof(newFestival.Location))" @bind-Value="newFestival.Location" />
                            <ValidationMessage For="@(() => newFestival.Location)" class="text-danger small" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="festivalStartDate" class="form-label fw-semibold">Start Date</label>
                                <InputDate id="festivalStartDate" class="@GetInputClass(nameof(newFestival.StartDate))" @bind-Value="newFestival.StartDate" />
                                <ValidationMessage For="@(() => newFestival.StartDate)" class="text-danger small" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="festivalEndDate" class="form-label fw-semibold">End Date</label>
                                <InputDate id="festivalEndDate" class="@GetInputClass(nameof(newFestival.EndDate))" @bind-Value="newFestival.EndDate" />
                                <ValidationMessage For="@(() => newFestival.EndDate)" class="text-danger small" />
                            </div>
                        </div>

                        <div class="d-grid mt-4">
                            <button class="btn btn-primary btn-lg" type="submit">
                                <i class="bi bi-calendar-plus me-2"></i>
                                Add Festival
                            </button>
                        </div>
                    </EditForm>

                    @if (successMessage != null)
                    {
                        <div class="alert alert-success mt-4">@successMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private FestivalCreateDto newFestival = new();
    private EditContext? editContext;
    private string? successMessage;

    protected override void OnInitialized()
    {
        newFestival = new FestivalCreateDto
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today
        };

        editContext = new EditContext(newFestival);
    }


    private async Task AddNewFestival()
    {
        await FestivalService.AddFestivalAsync(newFestival);
        successMessage = "Festival added successfully!";

        newFestival = new FestivalCreateDto
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today
        };
        editContext = new EditContext(newFestival); // reset the form
    }

    private string GetInputClass(string fieldName)
    {
        if (editContext is null)
            return "form-control";

        var fieldIdentifier = new FieldIdentifier(newFestival, fieldName);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();
        var isModified = editContext.IsModified(fieldIdentifier);

        return $"form-control {(isModified ? (isValid ? "is-valid" : "is-invalid") : "")}";
    }
}
