@page "/signin"
@using Microsoft.AspNetCore.Http
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@inject IUserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer


<div class="auth-container">
    <div class="auth-card">
        <h3 class="auth-title">Create Account</h3>

        <EditForm Model="registerInfo" OnValidSubmit="Register" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="registerInfo.Email" class="form-control" />
            </div>

            <div class="form-group mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" id="password" @bind-Value="registerInfo.Password" class="form-control" />
                <small class="text-muted">Minimum 8 characters</small>
            </div>

            <div class="form-group mb-4">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText type="password" id="confirmPassword" @bind-Value="registerInfo.ConfirmPassword" class="form-control" />
            </div>

            <button type="submit" class="auth-button">
                <i class="bi bi-person-plus-fill me-2"></i>
                Create Account
            </button>

            <div class="mt-3 text-center">
                Already have an account?
                <a href="/login" class="auth-link">Log in</a>
            </div>
        </EditForm>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #26244d;
        padding: 20px;
    }

    .auth-card {
        background: linear-gradient(135deg, #3d3b6b, #4a4872);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        width: 100%;
        max-width: 450px;
        border: 1px solid rgba(255,255,255,0.1);
    }

    .auth-title {
        color: #ffffff;
        text-align: center;
        margin-bottom: 2rem;
        font-size: 2rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .form-label {
        color: #ffffff;
        font-weight: 500;
    }

    .form-control {
        background-color: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        color: #ffffff;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            background-color: rgba(255,255,255,0.15);
            border-color: #20c997;
            box-shadow: 0 0 0 0.2rem rgba(32,201,151,0.25);
            color: #ffffff;
        }

    .auth-button {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        color: white;
        padding: 12px 24px;
        font-size: 1.1rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

        .auth-button:hover {
            background: linear-gradient(45deg, #218838, #1ba085);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }

    .text-muted {
        color: #b8b8b8 !important;
    }

    .auth-link {
        color: #20c997;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .auth-link:hover {
            color: #28a745;
            text-decoration: underline;
        }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private RegisterDto registerInfo { get; set; } = new();
    private string? errorMessage;

    private async Task Register()
    {
        try
        {
            await UserService.RegisterAsync(registerInfo);
			Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}